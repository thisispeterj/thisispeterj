name: Playwright Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  test:
    timeout-minutes: 90
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [chromium, firefox, webkit]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Install Jekyll dependencies
        run: bundle install

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ steps.playwright-version.outputs.version }}-${{ matrix.project }}

      - name: Install Playwright system dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install-deps

      - name: Install Playwright browser
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install ${{ matrix.project }}

      - name: Start Jekyll server
        run: bundle exec jekyll serve --detach --port 4000

      - name: Wait for Jekyll server
        run: sleep 5

      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.project }}
        env:
          CI: true

      - name: Stop Jekyll server
        if: always()
        run: pkill -f jekyll || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.project }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  accessibility:
    timeout-minutes: 45
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Install Jekyll dependencies
        run: bundle install

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ steps.playwright-version.outputs.version }}-chromium

      - name: Install Playwright system dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install-deps

      - name: Install Playwright browser
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium

      - name: Start Jekyll server
        run: bundle exec jekyll serve --detach --port 4000

      - name: Wait for Jekyll server
        run: sleep 5

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Stop Jekyll server
        if: always()
        run: pkill -f jekyll || true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: test-results/
          retention-days: 30

  performance:
    timeout-minutes: 45
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"
          bundler-cache: true

      - name: Install Jekyll dependencies
        run: bundle install

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ steps.playwright-version.outputs.version }}-chromium

      - name: Install Playwright system dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install-deps

      - name: Install Playwright browser
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium

      - name: Start Jekyll server
        run: bundle exec jekyll serve --detach --port 4000

      - name: Wait for Jekyll server
        run: sleep 5

      - name: Run performance tests
        run: npm run test:performance

      - name: Stop Jekyll server
        if: always()
        run: pkill -f jekyll || true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: test-results/
          retention-days: 30

  report:
    if: always()
    needs: [test, accessibility, performance]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Merge test results
        run: |
          mkdir -p merged-results
          find . -name "results.json" -exec cp {} merged-results/ \;

      - name: Generate combined report
        run: |
          echo "Test execution completed"
          echo "Results available in artifacts"
